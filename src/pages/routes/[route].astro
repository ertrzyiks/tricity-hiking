---
import type { InferGetStaticParamsType } from "astro";
import { getCollection, getEntry, render } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { RouteMap } from "../../components/ui/RouteMap/RouteMap";
import { FullElevationChart } from "../../components/ui/FullElevationChart/FullElevationChart";
import { config } from "../../components/markdown";
import { TrailAttributeValue } from "../../components/ui/TrailAttributeValue/TrailAttributeValue";
import { TrailAttributeName } from "../../components/ui/TrailAttributeName/TrailAttributeName";
import { mToKm } from "../../services/mToKm";
import { formatTime } from "../../services/formatTime";
import { Icon } from "astro-icon/components";
import TrailAttribute from "../../components/ui/TrailAttribute.astro";
import RouteMapLegend from "../../components/ui/RouteMapLegend.astro";

export async function getStaticPaths() {
  const allRoutes = await getCollection("routes");

  const routes = allRoutes.filter((route) => {
    return !route.data.draft;
  });

  return routes.map((route) => {
    return {
      params: {
        route: route.id,
      },
    };
  });
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;

const { route } = Astro.params as Params;

const entry = await getEntry("routes", route);

if (!entry) {
  Astro.response.status = 404;
  Astro.response.statusText = "Not found";
  return;
}

const geojson = await getEntry(entry.data.geojson);
const { Content } = await render(entry);

const attitudes = geojson.data.features[0].geometry.coordinates
  .map((coord) => {
    if (!Array.isArray(coord)) {
      return null;
    }
    return coord[2];
  })
  .filter((coords): coords is number => Boolean(coords));

const feature = geojson.data.features.find(
  (feature) => feature.geometry.type === "LineString",
);

if (!feature) {
  Astro.response.status = 404;
  Astro.response.statusText = "Not found";
  return;
}
---

<Layout
  title={`${entry.data.title}`}
  description={entry.data.htmlDescription ?? entry.data.description}
>
  <div
    class="max-w-(--breakpoint-xl) mx-auto relative h-[50vh] px-2 lg:px-0"
    transition:name="map"
  >
    <RouteMap client:only="preact" route={geojson.data} />
  </div>

  <RouteMapLegend />

  <div class="max-w-(--breakpoint-xl) mx-auto relative px-2 lg:px-0">
    <FullElevationChart client:load points={attitudes} />
  </div>

  <div class="max-w-(--breakpoint-xl) mx-auto">
    <div class="grid grid-cols-1 md:grid-cols-[300px_1fr] px-4 xl:px-0">
      <div>
        <div class="py-4 grid grid-cols-2 gap-x-2 gap-y-4 items-center">
          <TrailAttribute>
            <Icon name="mdi:hiking" class="w-5 h-5" slot="icon" />

            <TrailAttributeValue
              value={`${mToKm(feature.properties.distance).toFixed(2)}km`}
            />
            <TrailAttributeName value="Distance" />
          </TrailAttribute>

          <TrailAttribute>
            <Icon
              name="mdi:clock-time-three-outline"
              class="w-5 h-5"
              slot="icon"
            />

            <TrailAttributeValue
              value={formatTime(feature.properties.estimatedTime)}
            />
            <TrailAttributeName value="Time" />
          </TrailAttribute>

          <TrailAttribute>
            <Icon name="mdi:arrow-top-right-thin" class="w-5 h-5" slot="icon" />

            <TrailAttributeValue
              value={`${feature.properties.totalGain.toFixed(0)}m`}
            />
            <TrailAttributeName value="Total Gain" />
          </TrailAttribute>

          <TrailAttribute>
            <Icon
              name="mdi:arrow-bottom-right-thin"
              class="w-5 h-5"
              slot="icon"
            />

            <TrailAttributeValue
              value={`${feature.properties.totalLoss.toFixed(0)}m`}
            />
            <TrailAttributeName value="Total Loss" />
          </TrailAttribute>
        </div>
      </div>
      <div>
        <h1 class="py-4 text-4xl">{entry.data.title}</h1>

        <Content components={config} />
      </div>
    </div>
  </div>

  <style is:global>
    .maplibregl-map {
      height: 100%;
      width: 100%;
    }
  </style>
</Layout>
