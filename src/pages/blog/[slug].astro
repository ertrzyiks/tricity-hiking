---
import type { InferGetStaticParamsType } from "astro";
import { getCollection, getEntry, render } from "astro:content";
import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths() {
  const allBlogPosts = await getCollection("blog");

  const blogPosts = allBlogPosts.filter((post) => {
    return !post.data.draft;
  });

  return blogPosts.map((post) => {
    return {
      params: {
        slug: post.id,
      },
    };
  });
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;

const { slug } = Astro.params as Params;

const entry = await getEntry("blog", slug);

if (!entry) {
  Astro.response.status = 404;
  Astro.response.statusText = "Not found";
  return;
}

const { Content } = await render(entry);

const publishedDate = entry.data.publishDate.toLocaleDateString("en-US", {
  year: "numeric",
  month: "long",
});
---

<Layout
  title={`${entry.data.title} - Tricity Hiking Blog`}
  description={entry.data.description}
>
  <div class="max-w-(--breakpoint-lg) mx-auto px-4 py-8">
    <article>
      <header class="mb-8">
        <h1 class="text-4xl font-bold mb-4">{entry.data.title}</h1>
        <div class="flex flex-wrap gap-4 text-sm text-slate-600 mb-4">
          <time class="flex items-center gap-1">
            <svg
              class="w-4 h-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
              ></path>
            </svg>
            {publishedDate}
          </time>
          {
            entry.data.author && (
              <span class="flex items-center gap-1">
                <svg
                  class="w-4 h-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                  />
                </svg>
                {entry.data.author}
              </span>
            )
          }
        </div>
        {
          entry.data.tags && entry.data.tags.length > 0 && (
            <div class="flex flex-wrap gap-2">
              {entry.data.tags.map((tag) => (
                <span class="px-3 py-1 text-xs bg-green-100 text-green-800 rounded-full">
                  {tag}
                </span>
              ))}
            </div>
          )
        }
      </header>

      <div class="prose prose-lg max-w-none">
        <Content />
      </div>
    </article>

    <nav class="mt-12 pt-8 border-t border-slate-200">
      <a
        href="/"
        class="inline-flex items-center gap-2 text-green-600 hover:text-green-800 font-medium"
      >
        <svg
          class="w-4 h-4"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
        Back to Home
      </a>
    </nav>
  </div>
</Layout>
